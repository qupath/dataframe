package net.mahdilamb.stats;

import net.mahdilamb.dataframe.DataFrame;
import net.mahdilamb.dataframe.DoubleSeries;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.Objects;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;


/**
 * Compare the data ranking methods using the iris data set and validate against SciPy
 */
public class RankTest {
    public static DataFrame loadFromResources(final String name) {
        return DataFrame.from(new File(Objects.requireNonNull(Thread.currentThread().getContextClassLoader().getResource(name)).getFile()));
    }

    static final DataFrame df = loadFromResources("iris.csv");

    /**
     * Compare the ranks of the petal_width
     */
    @Test
    public void petalWidthTest() {
        DoubleSeries x = df.getDoubleSeries("petal_width");
        assertArrayEquals(
                new double[]{2, 2, 2, 2, 2, 4, 3, 2, 2, 1, 2, 2, 1, 1, 2, 4, 4, 3, 3, 3, 2, 4, 2, 5, 2, 2, 4, 2, 2, 2, 2, 4, 1, 2, 2, 2, 2, 1, 2, 2, 3, 3, 2, 6, 4, 3, 2, 2, 2, 2, 11, 12, 12, 10, 12, 10, 13, 7, 10, 11, 7, 12, 7, 11, 10, 11, 12, 7, 12, 8, 15, 10, 12, 9, 10, 11, 11, 14, 12, 7, 8, 7, 9, 13, 12, 13, 12, 10, 10, 10, 9, 11, 9, 7, 10, 9, 10, 10, 8, 10, 22, 16, 18, 15, 19, 18, 14, 15, 15, 22, 17, 16, 18, 17, 21, 20, 15, 19, 20, 12, 20, 17, 17, 15, 18, 15, 15, 15, 18, 13, 16, 17, 19, 12, 11, 20, 21, 15, 15, 18, 21, 20, 16, 20, 22, 20, 16, 17, 20, 15},
                Correlations.rankData(x::getDouble, x.size(), "dense"),
                0
        );
        assertArrayEquals(
                new double[]{6, 7, 8, 9, 10, 42, 35, 11, 12, 1, 13, 14, 2, 3, 15, 43, 44, 36, 37, 38, 16, 45, 17, 49, 18, 19, 46, 20, 21, 22, 23, 47, 4, 24, 25, 26, 27, 5, 28, 29, 39, 40, 30, 50, 48, 41, 31, 32, 33, 34, 79, 87, 88, 66, 89, 67, 99, 51, 68, 80, 52, 90, 53, 81, 69, 82, 91, 54, 92, 58, 105, 70, 93, 61, 71, 83, 84, 103, 94, 55, 59, 56, 62, 100, 95, 101, 96, 72, 73, 74, 63, 85, 64, 57, 75, 65, 76, 77, 60, 78, 148, 117, 128, 106, 134, 129, 104, 107, 108, 149, 122, 118, 130, 123, 145, 137, 109, 135, 138, 97, 139, 124, 125, 110, 131, 111, 112, 113, 132, 102, 119, 126, 136, 98, 86, 140, 146, 114, 115, 133, 147, 141, 120, 142, 150, 143, 121, 127, 144, 116},
                Correlations.rankData(x::getDouble, x.size(), "ordinal"),
                0
        );
        assertArrayEquals(
                new double[]{6, 6, 6, 6, 6, 42, 35, 6, 6, 1, 6, 6, 1, 1, 6, 42, 42, 35, 35, 35, 6, 42, 6, 49, 6, 6, 42, 6, 6, 6, 6, 42, 1, 6, 6, 6, 6, 1, 6, 6, 35, 35, 6, 50, 42, 35, 6, 6, 6, 6, 79, 87, 87, 66, 87, 66, 99, 51, 66, 79, 51, 87, 51, 79, 66, 79, 87, 51, 87, 58, 105, 66, 87, 61, 66, 79, 79, 103, 87, 51, 58, 51, 61, 99, 87, 99, 87, 66, 66, 66, 61, 79, 61, 51, 66, 61, 66, 66, 58, 66, 148, 117, 128, 105, 134, 128, 103, 105, 105, 148, 122, 117, 128, 122, 145, 137, 105, 134, 137, 87, 137, 122, 122, 105, 128, 105, 105, 105, 128, 99, 117, 122, 134, 87, 79, 137, 145, 105, 105, 128, 145, 137, 117, 137, 148, 137, 117, 122, 137, 105},
                Correlations.rankData(x::getDouble, x.size(), "min"),
                0
        );
        assertArrayEquals(
                new double[]{34, 34, 34, 34, 34, 48, 41, 34, 34, 5, 34, 34, 5, 5, 34, 48, 48, 41, 41, 41, 34, 48, 34, 49, 34, 34, 48, 34, 34, 34, 34, 48, 5, 34, 34, 34, 34, 5, 34, 34, 41, 41, 34, 50, 48, 41, 34, 34, 34, 34, 86, 98, 98, 78, 98, 78, 102, 57, 78, 86, 57, 98, 57, 86, 78, 86, 98, 57, 98, 60, 116, 78, 98, 65, 78, 86, 86, 104, 98, 57, 60, 57, 65, 102, 98, 102, 98, 78, 78, 78, 65, 86, 65, 57, 78, 65, 78, 78, 60, 78, 150, 121, 133, 116, 136, 133, 104, 116, 116, 150, 127, 121, 133, 127, 147, 144, 116, 136, 144, 98, 144, 127, 127, 116, 133, 116, 116, 116, 133, 102, 121, 127, 136, 98, 86, 144, 147, 116, 116, 133, 147, 144, 121, 144, 150, 144, 121, 127, 144, 116},
                Correlations.rankData(x::getDouble, x.size(), "max"),
                0
        );
        assertArrayEquals(
                new double[]{20.0, 20.0, 20.0, 20.0, 20.0, 45.0, 38.0, 20.0, 20.0, 3.0, 20.0, 20.0, 3.0, 3.0, 20.0, 45.0, 45.0, 38.0, 38.0, 38.0, 20.0, 45.0, 20.0, 49.0, 20.0, 20.0, 45.0, 20.0, 20.0, 20.0, 20.0, 45.0, 3.0, 20.0, 20.0, 20.0, 20.0, 3.0, 20.0, 20.0, 38.0, 38.0, 20.0, 50.0, 45.0, 38.0, 20.0, 20.0, 20.0, 20.0, 82.5, 92.5, 92.5, 72.0, 92.5, 72.0, 100.5, 54.0, 72.0, 82.5, 54.0, 92.5, 54.0, 82.5, 72.0, 82.5, 92.5, 54.0, 92.5, 59.0, 110.5, 72.0, 92.5, 63.0, 72.0, 82.5, 82.5, 103.5, 92.5, 54.0, 59.0, 54.0, 63.0, 100.5, 92.5, 100.5, 92.5, 72.0, 72.0, 72.0, 63.0, 82.5, 63.0, 54.0, 72.0, 63.0, 72.0, 72.0, 59.0, 72.0, 149.0, 119.0, 130.5, 110.5, 135.0, 130.5, 103.5, 110.5, 110.5, 149.0, 124.5, 119.0, 130.5, 124.5, 146.0, 140.5, 110.5, 135.0, 140.5, 92.5, 140.5, 124.5, 124.5, 110.5, 130.5, 110.5, 110.5, 110.5, 130.5, 100.5, 119.0, 124.5, 135.0, 92.5, 82.5, 140.5, 146.0, 110.5, 110.5, 130.5, 146.0, 140.5, 119.0, 140.5, 149.0, 140.5, 119.0, 124.5, 140.5, 110.5},
                Correlations.rankData(x::getDouble, x.size(), "average"),
                0
        );
    }

    /**
     * Compare the ranks of the sepal_length
     */
    @Test
    public void sepalLengthTest() {
        DoubleSeries x = df.getDoubleSeries("sepal_length");
        assertArrayEquals(
                new double[]{9, 7, 5, 4, 8, 12, 4, 8, 2, 7, 12, 6, 6, 1, 16, 15, 12, 9, 15, 9, 12, 9, 4, 9, 6, 8, 8, 10, 10, 5, 6, 12, 10, 13, 7, 8, 13, 7, 2, 9, 8, 3, 2, 8, 9, 6, 9, 4, 11, 8, 28, 22, 27, 13, 23, 15, 21, 7, 24, 10, 8, 17, 18, 19, 14, 25, 14, 16, 20, 14, 17, 19, 21, 19, 22, 24, 26, 25, 18, 15, 13, 13, 16, 18, 12, 18, 25, 21, 14, 13, 13, 19, 16, 8, 14, 15, 15, 20, 9, 15, 21, 16, 29, 21, 23, 33, 7, 31, 25, 30, 23, 22, 26, 15, 16, 22, 23, 34, 34, 18, 27, 14, 34, 21, 25, 30, 20, 19, 22, 30, 32, 35, 22, 21, 19, 34, 21, 22, 18, 27, 25, 27, 16, 26, 25, 25, 21, 23, 20, 17},
                Correlations.rankData(x::getDouble, x.size(), "dense"),
                0
        );
        assertArrayEquals(
                new double[]{33, 17, 10, 6, 23, 47, 7, 24, 2, 18, 48, 12, 13, 1, 74, 66, 49, 34, 67, 35, 50, 36, 8, 37, 14, 25, 26, 42, 43, 11, 15, 51, 44, 53, 19, 27, 54, 20, 3, 38, 28, 5, 4, 29, 39, 16, 40, 9, 46, 30, 138, 109, 134, 55, 116, 68, 100, 21, 121, 45, 31, 81, 84, 90, 60, 123, 61, 75, 96, 62, 82, 91, 101, 92, 110, 122, 131, 124, 85, 69, 56, 57, 76, 86, 52, 87, 125, 102, 63, 58, 59, 93, 77, 32, 64, 70, 71, 97, 41, 72, 103, 78, 139, 104, 117, 145, 22, 143, 126, 140, 118, 111, 132, 73, 79, 112, 119, 146, 147, 88, 135, 65, 148, 105, 127, 141, 98, 94, 113, 142, 144, 150, 114, 106, 95, 149, 107, 115, 89, 136, 128, 137, 80, 133, 129, 130, 108, 120, 99, 83},
                Correlations.rankData(x::getDouble, x.size(), "ordinal"),
                0
        );
        assertArrayEquals(
                new double[]{33, 17, 10, 6, 23, 47, 6, 23, 2, 17, 47, 12, 12, 1, 74, 66, 47, 33, 66, 33, 47, 33, 6, 33, 12, 23, 23, 42, 42, 10, 12, 47, 42, 53, 17, 23, 53, 17, 2, 33, 23, 5, 2, 23, 33, 12, 33, 6, 46, 23, 138, 109, 134, 53, 116, 66, 100, 17, 121, 42, 23, 81, 84, 90, 60, 123, 60, 74, 96, 60, 81, 90, 100, 90, 109, 121, 131, 123, 84, 66, 53, 53, 74, 84, 47, 84, 123, 100, 60, 53, 53, 90, 74, 23, 60, 66, 66, 96, 33, 66, 100, 74, 139, 100, 116, 145, 17, 143, 123, 140, 116, 109, 131, 66, 74, 109, 116, 146, 146, 84, 134, 60, 146, 100, 123, 140, 96, 90, 109, 140, 144, 150, 109, 100, 90, 146, 100, 109, 84, 134, 123, 134, 74, 131, 123, 123, 100, 116, 96, 81},
                Correlations.rankData(x::getDouble, x.size(), "min"),
                0
        );
        assertArrayEquals(
                new double[]{41, 22, 11, 9, 32, 52, 9, 32, 4, 22, 52, 16, 16, 1, 80, 73, 52, 41, 73, 41, 52, 41, 9, 41, 16, 32, 32, 45, 45, 11, 16, 52, 45, 59, 22, 32, 59, 22, 4, 41, 32, 5, 4, 32, 41, 16, 41, 9, 46, 32, 138, 115, 137, 59, 120, 73, 108, 22, 122, 45, 32, 83, 89, 95, 65, 130, 65, 80, 99, 65, 83, 95, 108, 95, 115, 122, 133, 130, 89, 73, 59, 59, 80, 89, 52, 89, 130, 108, 65, 59, 59, 95, 80, 32, 65, 73, 73, 99, 41, 73, 108, 80, 139, 108, 120, 145, 22, 143, 130, 142, 120, 115, 133, 73, 80, 115, 120, 149, 149, 89, 137, 65, 149, 108, 130, 142, 99, 95, 115, 142, 144, 150, 115, 108, 95, 149, 108, 115, 89, 137, 130, 137, 80, 133, 130, 130, 108, 120, 99, 83},
                Correlations.rankData(x::getDouble, x.size(), "max"),
                0
        );
        assertArrayEquals(
                new double[]{37.0, 19.5, 10.5, 7.5, 27.5, 49.5, 7.5, 27.5, 3.0, 19.5, 49.5, 14.0, 14.0, 1.0, 77.0, 69.5, 49.5, 37.0, 69.5, 37.0, 49.5, 37.0, 7.5, 37.0, 14.0, 27.5, 27.5, 43.5, 43.5, 10.5, 14.0, 49.5, 43.5, 56.0, 19.5, 27.5, 56.0, 19.5, 3.0, 37.0, 27.5, 5.0, 3.0, 27.5, 37.0, 14.0, 37.0, 7.5, 46.0, 27.5, 138.0, 112.0, 135.5, 56.0, 118.0, 69.5, 104.0, 19.5, 121.5, 43.5, 27.5, 82.0, 86.5, 92.5, 62.5, 126.5, 62.5, 77.0, 97.5, 62.5, 82.0, 92.5, 104.0, 92.5, 112.0, 121.5, 132.0, 126.5, 86.5, 69.5, 56.0, 56.0, 77.0, 86.5, 49.5, 86.5, 126.5, 104.0, 62.5, 56.0, 56.0, 92.5, 77.0, 27.5, 62.5, 69.5, 69.5, 97.5, 37.0, 69.5, 104.0, 77.0, 139.0, 104.0, 118.0, 145.0, 19.5, 143.0, 126.5, 141.0, 118.0, 112.0, 132.0, 69.5, 77.0, 112.0, 118.0, 147.5, 147.5, 86.5, 135.5, 62.5, 147.5, 104.0, 126.5, 141.0, 97.5, 92.5, 112.0, 141.0, 144.0, 150.0, 112.0, 104.0, 92.5, 147.5, 104.0, 112.0, 86.5, 135.5, 126.5, 135.5, 77.0, 132.0, 126.5, 126.5, 104.0, 118.0, 97.5, 82.0},
                Correlations.rankData(x::getDouble, x.size(), "average"),
                0
        );
    }
}
