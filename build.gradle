plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

ext.moduleName = 'net.mahdilamb.dataframe'

java {
    modularity.inferModulePath = true
    withJavadocJar()
    withSourcesJar()
}
compileJava {
    //will work with Java 1.8, but this is required as there is a module-info.java
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

group 'net.mahdilamb'
version '0.2.3'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

}
test {
    useJUnitPlatform()
}

javadoc {
    options.tags = ["apiNote", "implNote", "implSpec"]
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components["java"])
            pom {
                name = "dataframe"
                description = "A general use dataframe and statistics package"
                url = "https://github.com/mahdilamb/dataframe"
                inceptionYear = "2020"

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = "mahdilamb"
                        name = "Mahdi Lamb"
                        email = "mahdilamb[at]gmail[dot]com"
                    }
                }
                scm {
                    url = "https://github.com/mahdilamb/dataframe"
                    connection = "scm:https://mahdilamb@github.com/mahdilamb/dataframe.git"
                    developerConnection = "scm:git://github.com/mahdilamb/dataframe.git"
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.ossrhUsername
                password = project.ossrhPassword
            }
        }
    }
}

signing {
    String signingKeyId = findProperty("signing.keyId")
    String signingKey = findProperty("signing.secretKeyRingFile")
    String signingPassword = findProperty("signing.password")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign configurations.archives

}

tasks.withType(Sign) {
    onlyIf { !version.endsWith("SNAPSHOT") }
}